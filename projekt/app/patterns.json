{
    "TwoVariableArithmetic": {
        "pattern": [
            "load",
            "load",
            "binary",
            "store"
        ],
        "equivalentJava": "type varc = vara opr varb;"
    },
    "ThreeVariableArithmetic": {
        "pattern": [
            "load",
            "load",
            "binary",
            "load",
            "binary",
            "store"
        ],
        "equivalentJava": "type vard = vara opr varb opr varc;"
    },
    "IncrementVariable": {
        "pattern": [
            "load",
            "push",
            "binary",
            "store"
        ],
        "equivalentJava": "outsideVariable = insideVariable opr value;"
    },
    "DeclareVariable": {
        "pattern": [
            "push",
            "store"
        ],
        "equivalentJava": "type variable = value;"
    },
    "DeclareVariableFromParam": {
        "pattern": [
            "load",
            "store"
        ],
        "equivalentJava": "type variable = value;"
    },
    "DeclareVariableFromGlobal": {
        "pattern": [
            "load",
            "get",
            "store"
        ],
        "equivalentJava": "type variable = this.value;"
    },
    "VarReturn": {
        "pattern": [
            "load",
            "return"
        ],
        "equivalentJava": "return variable;"
    },
    "VarReturnValue": {
        "pattern": [
            "push",
            "return"
        ],
        "equivalentJava": "return type;"
    },
    "VoidReturn": {
        "pattern": [
            "return"
        ],
        "equivalentJava": ""
    },
    "Return": {
        "pattern": [
            "return"
        ],
        "equivalentJava": "return;"
    },
    "methodCall": {
        "pattern": [
            "load",
            "invoke"
        ],
        "equivalentJava": "variable.methodCall();"
    },
    "DeclareVariableAndAssignObject": {
        "pattern": [
            "new",
            "dup",
            "invoke",
            "store"
        ],
        "equivalentJava": "type variable = new type();"
    },
    "ConstructObject": {
        "pattern": [
            "new",
            "dup",
            "invoke",
            "pop"
        ],
        "equivalentJava": "new type();"
    },
    "conditional1": {
        "pattern": [
            "if"
        ],
        "equivalentJava": "if (variable1 comparer variable2){"
    },
    "conditional2": {
        "pattern": [
            "ifz"
        ],
        "equivalentJava": "if (variable1 comparer variable2){"
    },
    "jump": {
        "pattern": [
            "goto"
        ],
        "equivalentJava": "loopType ( condition ){basicBlock}"
    }
}